#Setting the directory
setwd("C:/Users/MMD/Desktop/MS ESILV/Projet-Fil Rouge/Etape 2/first_kick_FR_S2")
#Installing packages/libraries
install.packages("xlsx") 
library("xlsx")
library(stringr)
#Loading file
file6<- read.xlsx('TriangleGlobalAutoRC V3bis.xlsx',sheetIndex = 1, header=TRUE, colClasses=NA)
#Get 3 files : Reg sinistres, provision, primes
reg_sin <- file6
prov    <- file6
prime   <- file6
k=0
for (i in 1:(dim(file6)[1]/3)) {
  reg_sin <- reg_sin[-c(i*3-k*2,i*3-1-k*2)  ,]
  prov    <- prov   [-c(i*3-k*2,i*3-2-k*2)  ,]
  prime   <- prime  [-c(i*3-1-k*2,i*3-2-k*2),]
  k=k+1
}
#Changing years into periods (in years)
reg_sin[,1] = seq(4,11,1)
prov   [,1] = seq(4,11,1)
prime  [,1] = seq(4,11,1)
#Inversing columns and rows
file6 <- as.data.frame(t(file6))
#Changing columns names from Vi into periods added
for(i in 1:dim(file6)[2]) {
  names(file6)[i]<-file6[1,i]
}
#Deleting the first line as it was set as columns names
file6<-file6[-1,]
#Deleting the "X" from the rows names
for(i in 1:dim(file6)[1]) {
  row.names(file6)[i]<-str_sub(row.names(file6)[i], 2, 5)
}
#First view of the matrix
submit <- data.frame(file6)
write.xlsx(submit, file = "first_view.xlsx")
#Add columns representing a period of 0 years to 4 years
col<-as.vector(rep(0,dim(file6)[1]))
Addedcol<-data.frame(matrix(data=0,nrow=12,ncol=12))
names(Addedcol)<-c(0.33333333333333,0.66666666666667,	1,	1.33333333333333,	1.66666666666667,
                   2,	2.33333333333333,	2.66666666666667,	3,	3.33333333333333,
                   3.66666666666667,	4)
file_mod<-cbind(file6,Addedcol)
#Placing the added columns at the beginning of the matrix
neworder<-c(25, 26, 27, 28, 29, 30, 31,32, 33, 34, 35, 36, 1,  2,  3,  4,  5,  
            6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
            23, 24)
file_re_mod<-file_mod[,neworder]
#reordering the data based on the added columns
##researching the index for each row
index<-c(0,0,0,0,0,0,0,0)
for(i in 5:dim(file_re_mod)[1]) {
  k=1
  j=1
  while (k==1 && j<=dim(file_re_mod)[2]) {
    if ((as.integer(file_re_mod[i,j])==0)==TRUE) {
      j=j+1
    }
    else {
      k=j
    }
  }
  index[i-4]=k
}
index
##Reordering
file_re_re_mod<-file_re_mod
index2<-c(13,13,13)
index3<-c(index2,index)
for (i in 2:dim(file_re_re_mod)[1]) {
  draftrow<-file_re_re_mod[i,]
  for (j in (index3[i-1]-(3*(i-1))):(dim(file_re_re_mod)[2]-(3*(i-1)))) {
    file_re_re_mod[i,j]<-draftrow[j+3*(i-1)]
  }
  for (k in (dim(file_re_re_mod)[2]-(3*(i-1))+1):dim(file_re_re_mod)[2]) {
    file_re_re_mod[i,k]<-NA
  }
}
#Second view of the matrix
submit <- data.frame(file_re_re_mod)
write.xlsx(submit, file = "second_view.xlsx")
#Deleting years having Top left missing data
file_re_re_mod_del<-file_re_re_mod    [-1,]
for (i in 1:3) {
  file_re_re_mod_del<-file_re_re_mod_del[-1,]
}
for (i in 1:12) {
  file_re_re_mod_del<-file_re_re_mod_del[,-as.integer(dim(file_re_re_mod_del)[2])]
}
dim(file_re_re_mod_del)
#Third view of the matrix
submit <- data.frame(file_re_re_mod_del)
write.xlsx(submit, file = "third_view.xlsx")
#Regroup in a yearly view
file_re_re_mod_del_year<-file_re_re_mod_del
for (i in 1:dim(file_re_re_mod_del_year)[1]) {
  for (k in 1:8) {
    for (j in 1:dim(file_re_re_mod_del_year)[2]) {
      if (((colnames(file_re_re_mod_del_year)[j])==k)==TRUE) {
        file_re_re_mod_del_year[i,j]<-file_re_re_mod_del_year[i,j]+file_re_re_mod_del_year[i,j-1]+file_re_re_mod_del_year[i,j-2]
      }
    }
  }
}
for (i in 1:dim(file_re_re_mod_del_year)[1]) {
  for (j in 1:dim(file_re_re_mod_del_year)[2]) {
    if ((nchar(colnames(file_re_re_mod_del_year)[j])==1)==FALSE) {
      file_re_re_mod_del_year<-file_re_re_mod_del_year[,-j]
    }
  }
}
#Fourth view of the matrix
submit <- data.frame(file_re_re_mod_del_year)
write.xlsx(submit, file = "fourth_view.xlsx")
#Turn the data to cumulative paid claims
file_re_re_mod_del_year_cum<-file_re_re_mod_del_year
k=0
for (i in 1:(dim(file_re_re_mod_del_year_cum)[1]-1)) {
  for (j in 2:(dim(file_re_re_mod_del_year_cum)[2]-k)) {
    file_re_re_mod_del_year_cum[i,j]<-file_re_re_mod_del_year_cum[i,j]+file_re_re_mod_del_year_cum[i,j-1]
  }
  k=k+1
}
#Fifth view of the matrix
submit <- data.frame(file_re_re_mod_del_year_cum)
write.xlsx(submit, file = "fifth_view.xlsx")
#Estimation with chain ladder method
install.packages('ChainLadder')
library(ChainLadder)
file_re_re_mod_del_year_cum_est<-file_re_re_mod_del_year_cum
n=ncol(file_re_re_mod_del_year_cum_est)
L=rep(NA,n-1)
for(j in 1:(n-1)){
  L[j]=sum(file_re_re_mod_del_year_cum[1:(n-j),j+1])/sum(file_re_re_mod_del_year_cum[1:(n-j),j])
  file_re_re_mod_del_year_cum_est[(n-j+1):n,j+1]=L[j]*file_re_re_mod_del_year_cum_est[(n-j+1):n,j]
}
estimation<-as.matrix(file_re_re_mod_del_year_cum_est)
dimnames(estimation)[1]
dimnames(estimation) <- list(origin=rownames(estimation), dev=1:ncol(estimation))
estimation <- as.triangle(estimation)
plot(estimation)
#Sixth view of the matrix
submit <- data.frame(file_re_re_mod_del_year_cum_est)
write.xlsx(submit, file = "sixth_view.xlsx")
#Plotting developments for cumulative data
file_re_re_mod_del_year_cum_mat<-as.matrix(file_re_re_mod_del_year_cum)
dimnames(file_re_re_mod_del_year_cum_mat)[1]
dimnames(file_re_re_mod_del_year_cum_mat) <- list(origin=rownames(file_re_re_mod_del_year_cum_mat), dev=1:ncol(file_re_re_mod_del_year_cum_mat))
file_re_re_mod_del_year_cum_mat <- as.triangle(file_re_re_mod_del_year_cum_mat)
plot(file_re_re_mod_del_year_cum_mat)
plot(file_re_re_mod_del_year_cum_mat,lattice=TRUE)
#Mackchainladder
M <- MackChainLadder(file_re_re_mod_del_year_cum_mat, est.sigma = "Mack")
M
#Switch to an incremental data
file_re_re_mod_del_year_cum_mat_inc <- cum2incr(file_re_re_mod_del_year_cum_mat)
plot(file_re_re_mod_del_year_cum_mat_inc)
plot(file_re_re_mod_del_year_cum_mat_inc,lattice=TRUE)
#Case in which we can suppose that  the oldest origin year is not fully developed
dev_periode <- 1:7
plot(log(L-1) ~ dev_periode, main="Extrapollation Log-Linéaire des facteurs")
modele <- lm(log(L-1) ~ dev_periode)
abline(modele)
coeff <- coef(modele)
## extrapolate another 100 dev. period
extrap <- exp(coeff[1] + c(8:(8 + 100)) * coeff[2]) + 1
L_extrap <- prod(extrap)
L_extrap
plot(100*(rev(1/cumprod(rev(c(L, extrap[extrap>1.0001]))))), t="b",
        main="Modèle de développement des sinistres attendus",
        xlab="Période de développement", ylab="Développement en % de la perte finale")
#Triangle par extrapollation
L1 <- c(L, L_extrap)
file_re_re_mod_del_year_cum_extrap <- cbind(file_re_re_mod_del_year_cum, final = rep(0, 8))
for(i in 1:8){
  file_re_re_mod_del_year_cum_extrap[(8-i+1):n, i+1] <- file_re_re_mod_del_year_cum_extrap[(8-i+1):8,i]*L1[i]
}
round(file_re_re_mod_del_year_cum_extrap)
sum(file_re_re_mod_del_year_cum_extrap[ ,9] - getLatestCumulative(as.matrix(file_re_re_mod_del_year_cum)))
